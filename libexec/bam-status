#!/usr/bin/env bash

set -o pipefail

source bam-sh-setup

cmd=$(basename "$0")
args=$(getopt -o h -l "help,show-out-dir,no-show-out-dir,show-source-root,no-show-source-root" -n "$cmd" -- "$@")
if [ $? != 0 ]; then
  exit 1
fi

show_out_dir=1
show_source_root=0

eval set -- "$args"
while true; do
  case "$1" in
    -h|--help)
      exec man "$cmd"
      shift
      ;;
    --show-out-dir)
      show_out_dir=1
      shift
      ;;
    --no-show-out-dir)
      show_out_dir=0
      shift
      ;;
    --show-source-root)
      show_source_root=1
      shift
      ;;
    --no-show-source-root)
      show_source_root=0
      shift
      ;;
    --)
      shift
      break
      ;;
  esac
done

# Define exit codes
EXIT_CODE_BUILD_OUT_OF_DATE=1
EXIT_CODE_NINJA_OUT_OF_DATE=2
EXIT_CODE_ENV_CHANGED=3
EXIT_CODE_MISSING_BUILD=4

# Define colors
BLACK="\033[0;30m"
RED="\033[0;31m"
GREEN="\033[0;32m"
BROWN="\033[0;33m"
BLUE="\033[0;34m"
CYAN="\033[0;36m"
PURPLE="\033[0;35m"
LIGHT_GRAY="\033[0;37m"
DARK_GRAY="\033[1;30m"
LIGHT_RED="\033[1;31m"
LIGHT_GREEN="\033[1;32m"
YELLOW="\033[1;33m"
LIGHT_BLUE="\033[1;34m"
LIGHT_CYAN="\033[1;36m"
LIGHT_PURPLE="\033[1;35m"
WHITE="\033[1;37m"
NO_COLOR="\033[0m"

# Turn on color if stdout is a tty
if [ -t 1 ]; then
  DIRTY_COLOR="$RED"
else
  DIRTY_COLOR=
  NO_COLOR=
fi

function echo_dirty() {
  local emsg="$1"
  echo -e "${DIRTY_COLOR}${emsg}${NO_COLOR}"
}

if [ "$show_out_dir" -ne 0 ]; then
  echo "Build output directory: $BAM_OUTPUT_DIR"
fi
if [ "$show_source_root" -ne 0 ]; then
  echo "Source root: $BAM_SOURCE_ROOT"
fi

# Check if output directory has ninja build files
if ! [ -f "$BAM_OUTPUT_PATH/build.ninja" ]; then
  echo_dirty "No previously generated build"
  exit $EXIT_CODE_MISSING_BUILD
fi

# Check if build environment changed
buildenv="$BAM_OUTPUT_PATH/.buildenv"
envlog="$BAM_OUTPUT_PATH/build-env.log"
vars=()
if [ -f "$envlog" ]; then
  vars="$(sed -nr 's/^([a-zA-Z0-9_]+)=.*/\1/p' "$envlog")"
  IFS=$'\n' read -rd '' -a vars <<< "$vars"
fi
write_buildenv "$buildenv.tmp"
write_envvars "$envlog.tmp" "${vars[@]}"
diff -Naq "$buildenv" "$buildenv.tmp" > /dev/null && \
  diff -Naq "$envlog" "$envlog.tmp" > /dev/null
if [ "$?" -ne 0 ]; then
  rm -f "$buildenv.tmp" "$envlog.tmp"
  echo_dirty "Build environment modified"
  echo_dirty "Ninja files are out-of-date"
  exit $EXIT_CODE_ENV_CHANGED
else
  rm -f "$buildenv.tmp" "$envlog.tmp"
fi

# Check if ninja files are up to date
cat "$BAM_OUTPUT_PATH/build.ninja.d" | \
    sed '$a\\t@echo ninja out of date' | \
    make --question -C "$BAM_OUTPUT_PATH" -f - --no-print-directory
if [ "$?" -ne 0 ]; then
  echo_dirty "Ninja files are out-of-date"
  exit $EXIT_CODE_NINJA_OUT_OF_DATE
fi

tgt_string="Build is"
if [ "$#" -gt 0 ]; then
  targets="$(gn --root="$BAM_SOURCE_ROOT" ls "$BAM_OUTPUT_PATH" --as=output --all-toolchains "$@")"

  if [ "$?" -ne 0 ]; then
    echo "$cmd: error: $targets" >&2
    exit 1
  elif [ -z "$targets" ]; then
    echo "$cmd: error: cannot find any targets for: $@" >&2
    exit 1
  fi

  targets="$(echo "$targets" | sort -u)"
  IFS=$'\n' read -rd '' -a targets <<< "$targets"

  if [ "${#targets[@]}" -eq 1 ]; then
    tgt_string="Target is"
  else
    tgt_string="Targets are"
  fi
fi

# Check if build is up-to-date
ninja -C "$BAM_OUTPUT_PATH" -n "${targets[@]}" | tail -n 1 | \
    diff -q <(echo "ninja: no work to do.") - > /dev/null
if [ "$?" -ne 0 ]; then
  echo_dirty "$tgt_string out-of-date"
  exit $EXIT_CODE_BUILD_OUT_OF_DATE
else
  echo "$tgt_string up-to-date"
  exit 0
fi
