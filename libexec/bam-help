#!/usr/bin/env bash

function bam_usage() {
cat << EOF
Usage: bam [--version] [-h|--help] [-C <path>] [--exec-path <path>]
           [-o <path>|--out-dir <path>] <command> [<args>]

Commands:
  args            Display or configure arguments declared by the build
  browse          Browse dependency graph in a web browser
  build           Build a target or list of targets
  clean           Cleans the output directory
  commands        List all commands required to rebuild the given targets
  config          Get and set project or global options
  desc            Show lots of insightful information about a target
  format          Format .gn file
  gen             Generate ninja build files using 'gn gen'
  gn              Run gn to generate Ninja files or analyze build
  graph           Output graphviz dot file for targets
  help            Display help information about a build command
  init            Create an empty bam project or reinitialize an existing one
  ls              List matching targets
  misc            Show miscellaneous build information
  ninja           Run Ninja to build targets or analyze build
  path            Find paths between two targets
  project         Generate project files for an IDE (i.e. Eclipse)
  query           Show inputs/outputs for a path
  refs            Find stuff referencing a target or file
  run             Build and run a single target
  status          Show the build status
  targets         List targets by their rule or depth in the DAG
  test            Build and run tests for one or more targets
  version         Print bam build system version

'bam help' lists available subcommands. See 'bam help <command>' to read
about a specific subcommand.
EOF
  exit 0
}

cmd=$(basename "$0")
args=$(getopt -o h -l "help" -n "$cmd" -- "$@")
if [ $? != 0 ]; then
  exit 1
fi

eval set -- "$args"
while true; do
  case "$1" in
    -h|--help)
      exec man bam-help
      ;;
    --)
      shift
      break
      ;;
  esac
done

command="$1"
if [ -z "$command" ]; then
  bam_usage
elif [ "$command" == "help" ]; then
  exec man bam-help
fi

type -P "bam-$command" > /dev/null 2>&1 && exec bam-$command --help

source "bam-sh-setup"
alias="$(get_config_value "$BAM_CONFIG" alias "$command" | tail -n 1)"
if [ "$alias" != "$(null_value)" ]; then
  exec echo "\`bam $command' is aliased to \`$alias'"
fi

echo "$cmd: error: no help for 'bam-$command'" >&2
exit 1
