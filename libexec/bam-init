#!/usr/bin/env bash

set -e

source bam-sh-setup

configdir="build"
template_dir="$BAM_TEMPLATE_DIR"
name=
platforms=
cmd="$(basename "$0")"
args=$(getopt -o p:n:h -l "platforms:,name:,config:,template:,help" -n "$cmd" -- "$@")
if [ $? != 0 ]; then
  exit 1
fi

eval set -- "$args"
while true; do
  case "$1" in
    -h|--help)
      exec man "$cmd"
      shift
      ;;
    -p|--platforms)
      platforms="$2"
      shift 2
      ;;
    -n|--name)
      name="$2"
      shift 2
      ;;
    --config)
      configdir="$2"
      shift 2
      ;;
    --template)
      template_dir="${2:-$BAM_TEMPLATE_DIR}"
      shift 2
      ;;
    --)
      shift
      break
      ;;
  esac
done

if [ -z "$template_dir" ]; then
  template_dir="$(get_config_value "$BAM_CONFIG" init templateDir)"
  if [ "$template_dir" == "$(null_value)" ]; then
    template_dir=
  fi
fi
if [ -z "$template_dir" ]; then
  template_dir="$BAM_CORE_PATH/templates"
fi
if [ ! -d "$template_dir" ]; then
  echo "$cmd: warning: templates not found" >&2
  template_dir="$BAM_DEFAULT_CORE_PATH/templates"
fi

IFS=$'\n'
list=($(ls -d "$template_dir"/toolchains/platforms/*.gn))
all_platforms=($(basename -a -s .gn "${list[@]}"))
unset IFS
if [ "$platforms" == "list" ]; then
  echo "Available platforms:"
  printf "    %s\n" "${all_platforms[@]}"
  exit 0
fi
if [ -z "$platforms" ]; then
  platforms=("${all_platforms[@]}")
else
  IFS=$',' read -ra platforms <<< "$platforms"
fi

set -f
IFS=$'\n'
union_platforms=("${all_platforms[@]}" "${platforms[@]}")
union_platforms=($(sort <<< "${union_platforms[*]}"))
intersect_platforms=($(uniq -d <<< "${union_platforms[*]}"))
missing_platforms=("${intersect_platforms[@]}" "${platforms[@]}")
missing_platforms=($(sort <<< "${missing_platforms[*]}" | uniq -u))
unset IFS
set +f
if [ ${#missing_platforms[@]} -gt 0 ]; then
  echo "$cmd: error: the following platforms are not supported:" 2>&1
  printf "    %s\n" "${missing_platforms[@]}"
  exit 1
fi

rootdir="$1"
if [ -n "$rootdir" ]; then
  if ! [ -e "$rootdir" ]; then
    mkdir -p "$rootdir"
  fi
  cd "$rootdir"
fi

if [ -z "$name" ]; then
  name="$(basename "$(pwd)")"
fi

if ! [ -e ".bam/config" ]; then
  mkdir -p .bam
  echo -e "[core]\n\toutdir = //out" > ".bam/config"
fi

config_path="$configdir/config"
toolchain_path="$configdir/toolchain"

mkdir -p "$config_path"
mkdir -p "$toolchain_path"
cp "$template_dir/.gn" "$template_dir/BUILD.gn" .
cp "$template_dir"/config/*.gn* "$config_path/"

IFS=$'\n'
list=($(ls -d "$template_dir"/*/))
dir_list=($(basename -a "${list[@]}"))
unset IFS
for d in "${dir_list[@]}"; do
  if [[ "$d" != "config" && "$d" != "toolchains" ]]; then
    cp -r "$template_dir/$d" "$configdir"
  fi
done

IFS=$'\n'
list=($(ls -d "$template_dir"/config/*/))
configs=($(basename -a "${list[@]}" "${all_platforms[@]}" | sort | uniq -u))
unset IFS
for cf in "${configs[@]}" "${platforms[@]}"; do
  cp -r "$template_dir/config/$cf" "$config_path/"
done

IFS=$'\n'
list=($(ls "$template_dir"/toolchains/*.gn 2> /dev/null || true))
unset IFS
for file in "${list[@]}"; do
  echo >> "$toolchain_path/BUILD.gn"
  cat < "$file" >> "$toolchain_path/BUILD.gn"
done

for tc in "${platforms[@]}"; do
  echo >> "$toolchain_path/BUILD.gn"
  cat < "$template_dir/toolchains/platforms/$tc.gn" >> "$toolchain_path/BUILD.gn"
done

function get_host_os() {
  case "$1" in
    linux | linux-*)
      echo linux ;;
    darwin | darwin-*)
      echo mac ;;
    android | android-*)
      echo android ;;
    windows | windows-* | mingw | mingw* | *cygwin*)
      echo win ;;
    *)
      echo $1 ;;
  esac
}

function get_host_platform() {
  case "$1" in
    darwin | darwin-*)
      echo "${HOST_CPU}-apple-mac" ;;
    windows | windows-* | mingw | mingw* | *cygwin*)
      echo "${HOST_CPU}-w64-mingw32" ;;
    *)
      echo "${HOST_CPU}-${1}-gnu" ;;
    esac
}

if [ -n "$IN_NIX_SHELL" ]; then
  HOST_CPU=$(echo $system | sed 's/-.*//')
else
  HOST_CPU=$(uname -m)
fi
PLATFORMS=$(echo "\"${platforms[@]}\"" | sed 's/[ ]/", "/g')
UNAME=$(uname -s | tr A-Z a-z)
HOST_OS=$(get_host_os "$UNAME")
HOST_PLATFORM="$(get_host_platform "$UNAME")"
PROJECT_NAME="$name"
YEAR=$(date +%Y)

for gnfile in "BUILD.gn"  ".gn" $(find "$configdir" -type f -name '*.gn*'); do
  sed -i "s/@PROJECT_NAME@/$PROJECT_NAME/g" "$gnfile"
  sed -i "s/@PLATFORMS@/$PLATFORMS/g" "$gnfile"
  sed -i "s/@GN_SETTINGS_DIR@/$configdir/g" "$gnfile"
  sed -i "s/@HOST_PLATFORM@/$HOST_PLATFORM/g" "$gnfile"
  sed -i "s/@HOST_CPU@/$HOST_CPU/g" "$gnfile"
  sed -i "s/@HOST_OS@/$HOST_OS/g" "$gnfile"
  sed -i "s/@YEAR@/$YEAR/g" "$gnfile"
done
