import("../config/colors.gni")

# This template defines a toolchain for style.
#
# It requires the following variables specifying the executables to run:
#  - cc
#  - cxx
# and a toolchain_args scope variable with the following variables:
#  - current_cpu
#  - current_os
#  - current_platform
#
# Optional parameters that control the tools:
#
#  - asm
#      The executable to run for asm files.
#  - deps
#      Just forwarded to the toolchain definition.
#  - executable_extension
#      If this string is specified it will be used for the file extension
#      for an executable, rather than using no extension; targets will
#      still be able to override the extension using the output_extension
#      variable.
#  - loadable_module_extension
#      If this string is specified it will be used for the file extension
#      for a loadable module, rather than the shlib_extension.
#  - shlib_extension
#      If this string is specified it will be used for the file extension
#      for a shared library, rather than default value specified in
#      toolchain_defaults.gni
#
template("style_toolchain") {
  assert(defined(invoker.cc), "${color_error}style_toolchain() must specify a \"cc\" value${color_none}")
  assert(defined(invoker.cxx), "${color_error}style_toolchain() must specify a \"cxx\" value${color_none}")

  # GN's syntax can't handle more than one scope dereference at once, like
  # "invoker.toolchain_args.foo", so make a temporary to hold the toolchain
  # args so we can do "invoker_toolchain_args.foo".
  assert(defined(invoker.toolchain_args),
         "${color_error}Toolchains must specify toolchain_args")
  invoker_toolchain_args = invoker.toolchain_args
  assert(defined(invoker_toolchain_args.current_cpu),
         "${color_error}toolchain_args must specify a \"current_cpu\"${color_none}")
  assert(defined(invoker_toolchain_args.current_os),
         "${color_error}toolchain_args must specify a \"current_os\"${color_none}")
  assert(defined(invoker_toolchain_args.current_platform),
         "${color_error}toolchain_args must specify a \"current_platform\"${color_none}")

  import("$bam_core_path/toolchain/toolchain_defaults.gni")

  toolchain(target_name) {
    if (defined(invoker.pool)) {
      pool = invoker.pool
    }

    cc = invoker.cc
    cxx= invoker.cxx
    if (defined(invoker.asm)) {
      asm = invoker.asm
    } else {
      asm = invoker.cc
    }
    assert(!defined(invoker.ar) || invoker.ar == invoker.ar)
    assert(!defined(invoker.ld) || invoker.ar == invoker.ld)

    if (defined(invoker.shlib_extension)) {
      default_shlib_extension = invoker.shlib_extension
    } else {
      default_shlib_extension = shlib_extension
    }

    if (defined(invoker.executable_extension)) {
      default_executable_extension = invoker.executable_extension
    } else {
      default_executable_extension = ".style"
    }

    tool("cc") {
      if (defined(invoker.source_extensions_cc)) {
        source_extensions = invoker.source_extensions_cc
      }
      if (defined(invoker.depfile)) {
        depfile = invoker.depfile
        depsformat = invoker.depsformat
      }
      command = "$cc {{cppflags}} {{cppflags_c}} {{source}} && touch {{output}}"
      description = "STYLE CC {{output}}"
      outputs = [
        "{{source_out_dir}}/{{source_file_part}}.style",
      ]
    }

    tool("cxx") {
      if (defined(invoker.source_extensions_cxx)) {
        source_extensions = invoker.source_extensions_cxx
      }
      if (defined(invoker.depfile)) {
        depfile = invoker.depfile
        depsformat = invoker.depsformat
      }
      command = "$cxx {{cppflags}} {{cppflags_cc}} {{source}} && touch {{output}}"
      description = "STYLE CXX {{output}}"
      outputs = [
        "{{source_out_dir}}/{{source_file_part}}.style",
      ]
    }

    tool("objc") {
      if (defined(invoker.source_extensions_objc)) {
        source_extensions = invoker.source_extensions_objc
      }
      if (defined(invoker.depfile)) {
        depfile = invoker.depfile
        depsformat = invoker.depsformat
      }
      command = "$cc {{cppflags}} {{cppflags_objc}} {{source}} && touch {{output}}"
      description = "STYLE OBJC {{output}}"
      outputs = [
        "{{source_out_dir}}/{{source_file_part}}.style",
      ]
    }

    tool("objcxx") {
      if (defined(invoker.source_extensions_objcxx)) {
        source_extensions = invoker.source_extensions_objcxx
      }
      if (defined(invoker.depfile)) {
        depfile = invoker.depfile
        depsformat = invoker.depsformat
      }
      command = "$cxx {{cppflags}} {{cppflags_objcc}} {{source}} && touch {{output}}"
      description = "STYLE OBJCXX {{output}}"
      outputs = [
        "{{source_out_dir}}/{{source_file_part}}.style",
      ]
    }

    tool("asm") {
      if (defined(invoker.source_extensions_asm)) {
        source_extensions = invoker.source_extensions_asm
      }
      if (defined(invoker.depfile)) {
        depfile = invoker.depfile
        depsformat = invoker.depsformat
      }
      command = "$asm {{asmppflags}} {{source}} && touch {{output}}"
      description = "STYLE ASM {{output}}"
      outputs = [
        "{{source_out_dir}}/{{source_file_part}}.style",
      ]
    }

    tool("alink") {
      command = "touch {{output}}"
      description = "STYLE AR {{output}}"
      outputs = [
        "{{output_dir}}/{{target_output_name}}{{output_extension}}",
      ]
      default_output_dir = "{{target_out_dir}}"
      default_output_extension = ".a.style"
      output_prefix = "lib"
    }

    tool("solink") {
      soname = "{{target_output_name}}{{output_extension}}"
      sofile = "{{output_dir}}/$soname"

      command = "touch {{output}}"

      description = "STYLE SOLINK $sofile"

      # Use this for {{output_extension}} expansions unless a target manually
      # overrides it (in which case {{output_extension}} will be what the target
      # specifies).
      default_output_extension = default_shlib_extension + ".style"

      default_output_dir = root_shlib_dir

      output_prefix = "lib"

      outputs = [
        sofile,
      ]
    }

    tool("solink_module") {
      soname = "{{target_output_name}}{{output_extension}}"
      sofile = "{{output_dir}}/$soname"

      command = "touch {{output}}"

      description = "STYLE SOLINK_MODULE $sofile"

      # Use this for {{output_extension}} expansions unless a target manually
      # overrides it (in which case {{output_extension}} will be what the target
      # specifies).
      if (defined(invoker.loadable_module_extension)) {
        default_output_extension = invoker.loadable_module_extension + ".style"
      } else {
        default_output_extension = default_shlib_extension + ".style"
      }

      default_output_dir = root_shlib_dir

      output_prefix = "lib"

      outputs = [
        sofile,
      ]
    }

    tool("link") {
      exename = "{{target_output_name}}{{output_extension}}"
      outfile = "{{output_dir}}/$exename"

      # Use this for {{output_extension}} expansions unless a target manually
      # overrides it (in which case {{output_extension}} will be what the target
      # specifies).
      default_output_extension = default_executable_extension

      default_output_dir = "{{root_out_dir}}"

      command = "touch {{output}}"
      description = "STYLE LINK $outfile"
      outputs = [
        outfile,
      ]
    }

    tool("stamp") {
      command = "touch {{output}}"
      description = "STAMP {{output}}"
    }

    tool("copy") {
      command = "ln -f {{source}} {{output}} 2>/dev/null || (rm -rf {{output}} && cp -af {{source}} {{output}})"
      description = "COPY {{source}} {{output}}"
    }

    # When invoking this toolchain not as the default one, these args will be
    # passed to the build. They are ignored when this is the default toolchain.
    toolchain_args = {
      if (defined(invoker.pkg_config)) {
        pkg_config = invoker.pkg_config
      }
      if (defined(invoker.pkg_config_args)) {
        pkg_config_args = invoker.pkg_config_args
      }

      forward_variables_from(invoker_toolchain_args, "*", [], true)

      target_os = current_os
      target_cpu = current_cpu
      target_platform = current_platform
    }

    forward_variables_from(invoker, [ "deps" ])
  }
}
