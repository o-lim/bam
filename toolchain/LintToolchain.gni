import("../config/colors.gni")

# This template defines a generic lint toolchain wrapper.
#
# It requires the following variables specifying the executables to run:
#  - cc
#  - cxx
# the following configuration variables
#  - toolchain_type
#      The type of toolchain to load (i.e. gcc, ghs, ti).
# and a toolchain_args scope variable with the following variables:
#  - current_cpu
#  - current_os
#  - current_platform
#
# Optional parameters that control the tools:
#
#  - extra_asmflags
#      Extra flags to be appended when linting assembly files.
#  - extra_asmppflags
#      Extra flags to be appended when linting assembly files. "ASMPP" stands
#      for "ASM PreProcessor" in this context, although it can be used for non-
#      preprocessor flags as well.
#  - extra_cflags
#      Extra flags to be appended when linting C files (but not C++ files).
#  - extra_cppflags
#      Extra flags to be appended when linting both C and C++ files. "CPP"
#      stands for "C PreProcessor" in this context, although it can be
#      used for non-preprocessor flags as well. Not to be confused with
#      "CXX" (which follows).
#  - extra_cxxflags
#      Extra flags to be appended when linting C++ files (but not C files).
#  - extra_objcflags
#      Extra flags to be appended when linting Objective C files.
#  - extra_objcxxflags
#      Extra flags to be appended when linting Objective C++ files.
#
#  - is_builtin (defaults to true)
#      Specifies whether or not the toolchain_type is a builtin toolchain
#      that is included as part of the build system. Templates for builtin
#      toolchains are automatically imported. If this is set to false, you
#      must manually import your toolchain templates.
#  - lintasm (defaults to "flint")
#      The lint executable to run for assembly source files.
#  - lintcc (defaults to "flint")
#      The lint executable to run for C source files.
#  - lintcxx (defaults to "flint")
#      The lint executable to run for C++ source files.
#  - lint_forwards
#      List of additional variable names to forward to the lint toolchain.
#  - deps
#      Just forwarded to the toolchain definition.
#  - executable_extension
#      If this string is specified it will be used for the file extension
#      for an executable, rather than using no extension; targets will
#      still be able to override the extension using the output_extension
#      variable.
#  - loadable_module_extension
#      If this string is specified it will be used for the file extension
#      for a loadable module, rather than the shlib_extension.
#  - rebuild_define
#      The contents of this string, if specified, will be passed as a #define
#      to the toolchain. It can be used to force recompiles whenever a
#      toolchain is updated.
#  - shlib_extension
#      If this string is specified it will be used for the file extension
#      for a shared library, rather than default value specified in
#      toolchain_defaults.gni
#  - source_extensions_asm
#      List of source file extensions for assembly files.
#  - source_extensions_cc
#      List of source file extensions for C files.
#  - source_extensions_cxx
#      List of source file extensions for C++ files.
#  - source_extensions_ld
#      List of source file extensions for linker tools.
#      (i.e. linker script files)
#  - source_extensions_objc
#      List of source file extensions for Objective C files.
#  - source_extensions_objcxx
#      List of source file extensions for Objective C++ files.
#
template("LintToolchain") {
  assert(defined(invoker.toolchain_type), 
          "${color_error}LintToolchain() must specify a \"toolchain_type\" value${color_none}")
  assert(defined(invoker.cc), "${color_error}LintToolchain() must specify a \"cc\" value${color_none}")
  assert(defined(invoker.cxx), "${color_error}LintToolchain() must specify a \"cxx\" value${color_none}")

  # GN's syntax can't handle more than one scope dereference at once, like
  # "invoker.toolchain_args.foo", so make a temporary to hold the toolchain
  # args so we can do "invoker_toolchain_args.foo".
  assert(defined(invoker.toolchain_args),
         "${color_error}Toolchains must specify toolchain_args")
  invoker_toolchain_args = invoker.toolchain_args
  assert(defined(invoker_toolchain_args.current_cpu),
         "${color_error}toolchain_args must specify a \"current_cpu\"${color_none}")
  assert(defined(invoker_toolchain_args.current_os),
         "${color_error}toolchain_args must specify a \"current_os\"${color_none}")
  assert(defined(invoker_toolchain_args.current_platform),
         "${color_error}toolchain_args must specify a \"current_platform\"${color_none}")
  mark_used(invoker_toolchain_args)

  toolchain_type = invoker.toolchain_type
  is_builtin = (!defined(invoker.is_builtin) || invoker.is_builtin)

  if (is_builtin) {
    # Toolchain type is built into build system, so import the necessary gn
    # files.
    import("$bam_core_path/toolchain/lint/${toolchain_type}_lint.gni")
  } else {
    # This is a user defined toolchain, so import the necessary gn files from
    # the user specified toolchain_path.
    import("$toolchain_path/lint/${toolchain_type}_lint.gni")
  }

  if (defined(invoker.lint_forwards)) {
    lint_forwards = invoker.lint_forwards
  } else {
    lint_forwards = []
  }

  target("${toolchain_type}_lint", target_name) {
    forward_variables_from(invoker, [
      "cc",
      "cxx",
      "deps",
      "executable_extension",
      "extra_asmflags",
      "extra_asmppflags",
      "extra_cflags",
      "extra_cppflags",
      "extra_cxxflags",
      "extra_objcflags",
      "extra_objcxxflags",
      "lintasm",
      "lintcc",
      "lintcxx",
      "pkg_config",
      "pkg_config_args",
      "rebuild_define",
      "shlib_extension",
      "source_extensions_asm",
      "source_extensions_cc",
      "source_extensions_cxx",
      "source_extensions_objc",
      "source_extensions_objcxx",
      "toolchain_args",
    ] + lint_forwards,
    [], true)
  }
}
