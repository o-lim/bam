import("../config/colors.gni")
import("Toolchain.gni")
import("LintToolchain.gni")

# This template defines a generic toolchain wrapper with lint support.
#
# It requires the following variables specifying the executables to run:
#  - cc
#  - cxx
#  - ar
#  - ld
# the following configuration variables
#  - toolchain_type
#      The type of toolchain to load (i.e. gcc, ghs, ti).
# and a toolchain_args scope variable with the following variables:
#  - current_cpu
#  - current_os
#  - current_platform
#
# Optional parameters that control the tools:
#
#  - extra_asmflags
#      Extra flags to be appended when assembling files.
#  - extra_asmppflags
#      Extra flags to be appended when linting assembly files. "ASMPP" stands
#      for "ASM Pre/Post-Processor" in this context, since the lint step is
#      done either pre or post compile.
#  - extra_cflags_c
#      Extra flags to be appended when compiling C files (but not C++ files).
#  - extra_cflags_cc
#      Extra flags to be appended when compiling C++ files (but not C files).
#  - extra_cflags_objc
#      Extra flags to be appended when compiling Objective C files.
#  - extra_cflags_objcc
#      Extra flags to be appended when compiling Objective C++ files.
#  - extra_cppflags
#      Extra flags to be appended when linting C/C++ and Objective C/C++ files.
#      "CPP" stands for "C Pre/Post-Processor" in this context, since the lint
#      step is done either pre or post compile.
#  - extra_cppflags_c
#      Extra flags to be appended when linting C files (but not C++ files).
#  - extra_cppflags_cc
#      Extra flags to be appended when linting C++ files (but not C files).
#  - extra_cppflags_objc
#      Extra flags to be appended when linting Object C files.
#  - extra_cppflags_objcc
#      Extra flags to be appended when linting Object C++ files.
#  - extra_ldflags
#      Extra flags to be appended when linking
#
#  - libs_section_prefix
#  - libs_section_postfix
#      The contents of these strings, if specified, will be placed around
#      the libs section of the linker line. It allows one to inject libraries
#      at the beginning and end for all targets in a toolchain.
#  - solink_libs_section_prefix
#  - solink_libs_section_postfix
#      Same as libs_section_{pre,post}fix except used for solink instead of link.
#
#  - asm_outputs
#      The content of this array, if specified, will be added to the list of
#      outputs from the asm command. This can be useful in conjunction with
#      the post_asm parameter.
#  - compile_outputs
#      The content of this array, if specified, will be added to the list of
#      outputs from the cc/cxx commands. This can be useful in conjunction with
#      the post_compile parameter.
#  - alink_outputs
#      The content of this array, if specified, will be added to the list of
#      outputs from the link command. This can be useful in conjunction with
#      the post_alink parameter.
#  - link_outputs
#      The content of this array, if specified, will be added to the list of
#      outputs from the link command. This can be useful in conjunction with
#      the post_link parameter.
#  - solink_outputs
#      The content of this array, if specified, will be added to the list of
#      outputs from the link command. This can be useful in conjunction with
#      the post_solink parameter.
#  - solink_module_outputs
#      The content of this array, if specified, will be added to the list of
#      outputs from the link command. This can be useful in conjunction with
#      the post_solink_module parameter.
#
#  - post_asm
#      The content of this string, if specified, will be run as a separate
#      command following the the asm command.
#  - post_compile
#      The content of this string, if specified, will be run as a separate
#      command following the the cc/cxx commands.
#  - post_alink
#      The content of this string, if specified, will be run as a separate
#      command following the the alink command.
#  - post_link
#      The content of this string, if specified, will be run as a separate
#      command following the the link command.
#  - post_solink
#      The content of this string, if specified, will be run as a separate
#      command following the the solink command.
#  - post_solink_module
#      The content of this string, if specified, will be run as a separate
#      command following the the solink_module command.
#
#  - executable_extension
#      If this string is specified it will be used for the file extension
#      for an executable, rather than using no extension; targets will
#      still be able to override the extension using the output_extension
#      variable.
#  - loadable_module_extension
#      If this string is specified it will be used for the file extension
#      for a loadable module, rather than the shlib_extension.
#  - object_extensions
#      List of extensions for object files that are passed straight to the
#      linker.
#  - rebuild_define
#      The contents of this string, if specified, will be passed as a #define
#      to the toolchain. It can be used to force recompiles whenever a
#      toolchain is updated.
#  - shlib_extension
#      If this string is specified it will be used for the file extension
#      for a shared library, rather than default value specified in
#      toolchain_defaults.gni
#  - source_extensions_asm
#      List of source file extensions for assembly files.
#  - source_extensions_cc
#      List of source file extensions for C files.
#  - source_extensions_cxx
#      List of source file extensions for C++ files.
#  - source_extensions_ld
#      List of source file extensions for linker tools.
#      (i.e. linker script files)
#  - source_extensions_objc
#      List of source file extensions for Objective C files.
#  - source_extensions_objcxx
#      List of source file extensions for Objective C++ files.
#
#  - deps
#      Just forwarded to the toolchain definition.
#  - is_builtin (defaults to true)
#      Specifies whether or not the toolchain_type is a builtin toolchain
#      that is included as part of the build system. Templates for builtin
#      toolchains are automatically imported. If this is set to false, you
#      must manually import your toolchain templates.
#  - lintasm (defaults to "flint")
#      Specifies whether or not the toolchain_type is a builtin toolchain
#      that is included as part of the build system.
#  - lintasm (defaults to "flint")
#      The lint executable to run for assembly source files.
#  - lintcc (defaults to "flint")
#      The lint executable to run for C source files.
#  - lintcxx (defaults to "flint")
#      The lint executable to run for C++ source files.
#  - lint_forwards
#      List of additional variable names to forward to the lint toolchain.
#  - pool
#      Just forwarded to the toolchain definition.
#  - strip
#      Location of the strip executable. When specified, strip will be run on
#      all shared libraries and executables as they are built. The pre-stripped
#      artifacts will be put in lib.stripped/ and exe.stripped/.
#  - toolchain_forwards
#      List of additional variable names to forward to the toolchain.
#
# Optional build argument contols.
#
#  - use_ccache
#      Enable the use of ccache.
template("ToolchainWithLint") {
  assert(defined(invoker.toolchain_type), 
          "${color_error}ToolchainWithLint() must specify a \"toolchain_type\" value${color_none}")
  assert(defined(invoker.cc), "${color_error}ToolchainWithLint() must specify a \"cc\" value${color_none}")
  assert(defined(invoker.cxx), "${color_error}ToolchainWithLint() must specify a \"cxx\" value${color_none}")
  assert(defined(invoker.ar), "${color_error}ToolchainWithLint() must specify a \"ar\" value${color_none}")
  assert(defined(invoker.ld), "${color_error}ToolchainWithLint() must specify a \"ld\" value${color_none}")

  # GN's syntax can't handle more than one scope dereference at once, like
  # "invoker.toolchain_args.foo", so make a temporary to hold the toolchain
  # args so we can do "invoker_toolchain_args.foo".
  assert(defined(invoker.toolchain_args),
         "${color_error}Toolchains must specify toolchain_args")
  invoker_toolchain_args = invoker.toolchain_args
  assert(defined(invoker_toolchain_args.current_cpu),
         "${color_error}toolchain_args must specify a \"current_cpu\"${color_none}")
  assert(defined(invoker_toolchain_args.current_os),
         "${color_error}toolchain_args must specify a \"current_os\"${color_none}")
  assert(defined(invoker_toolchain_args.current_platform),
         "${color_error}toolchain_args must specify a \"current_platform\"${color_none}")
  mark_used(invoker_toolchain_args)

  if (defined(invoker.toolchain_forwards)) {
    toolchain_forwards = invoker.toolchain_forwards
  } else {
    toolchain_forwards = []
  }
  if (defined(invoker.lint_forwards)) {
    lint_forwards = invoker.lint_forwards
  } else {
    lint_forwards = []
  }

  Toolchain(target_name) {
    forward_variables_from(invoker, toolchain_variables + [
      "is_builtin",
      "toolchain_forwards",
      "toolchain_type",
    ] + toolchain_forwards,
    [], true)
  }

  LintToolchain("lint-$target_name") {
    if (defined(invoker.source_extensions_lintcc)) {
      source_extensions_cc = invoker.source_extensions_lintcc
    } else if (defined(invoker.source_extensions_cc)) {
      source_extensions_cc = invoker.source_extensions_cc
    }
    if (defined(invoker.source_extensions_lintcxx)) {
      source_extensions_cxx = invoker.source_extensions_lintcxx
    } else if (defined(invoker.source_extensions_cxx)) {
      source_extensions_cxx = invoker.source_extensions_cxx
    }
    if (defined(invoker.source_extensions_lintobjc)) {
      source_extensions_objc = invoker.source_extensions_lintobjc
    } else if (defined(invoker.source_extensions_objc)) {
      source_extensions_objc = invoker.source_extensions_objc
    }
    if (defined(invoker.source_extensions_lintobjcxx)) {
      source_extensions_objcxx = invoker.source_extensions_lintobjcxx
    } else if (defined(invoker.source_extensions_objcxx)) {
      source_extensions_objcxx = invoker.source_extensions_objcxx
    }
    if (defined(invoker.source_extensions_lintasm)) {
      source_extensions_asm = invoker.source_extensions_lintasm
    } else if (defined(invoker.source_extensions_asm)) {
      source_extensions_asm = invoker.source_extensions_asm
    }

    forward_variables_from(invoker, toolchain_variables_for_lint + [
      "is_builtin",
      "lint_forwards",
      "toolchain_type",
    ] + lint_forwards,
    [], true)
  }
}
