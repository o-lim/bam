import("../../config/colors.gni")
import("../lint_toolchain.gni")

# This template defines a generic lint toolchain wrapper.
#
# It requries a toolchain_args scope variable with the following variables:
#  - current_cpu
#  - current_os
#  - current_platform
#
# Optional parameters that control the tools:
#
#  - extra_asmflags
#      Extra flags to be appended when linting assembly files.
#  - extra_asmppflags
#      Extra flags to be appended when linting assembly files. "ASMPP" stands
#      for "ASM PreProcessor" in this context, although it can be used for non-
#      preprocessor flags as well.
#  - extra_cflags_c
#      Extra flags to be appended when linting C files (but not C++ files).
#  - extra_cppflags
#      Extra flags to be appended when linting both C and C++ files. "CPP"
#      stands for "C PreProcessor" in this context, although it can be
#      used for non-preprocessor flags as well. Not to be confused with
#      "CXX" (which follows).
#  - extra_cflags_cc
#      Extra flags to be appended when linting C++ files (but not C files).
#  - extra_cflags_objc
#      Extra flags to be appended when linting Objective C files.
#  - extra_cflags_objcc
#      Extra flags to be appended when linting Objective C++ files.
#
#  - lintasm (defaults to "flint")
#      The lint executable to run for assembly source files.
#  - lintcc (defaults to "flint")
#      The lint executable to run for C source files.
#  - lintcxx (defaults to "flint")
#      The lint executable to run for C++ source files.
#  - pre_lintasm
#      The command to run before linting assembly source files.
#      (i.e. pre-processing or dependency analysis).
#  - pre_lintcc
#      The command to run before linting C source files.
#      (i.e. pre-processing or dependency analysis).
#  - pre_lintcxx
#      The command to run before linting C++ source files.
#      (i.e. pre-processing or dependency analysis).
#  - post_lintasm
#      The command to run after linting assembly source files.
#      (i.e. post-processing or dependency analysis).
#  - post_lintcc
#      The command to run after linting C source files.
#      (i.e. post-processing or dependency analysis).
#  - post_lintcxx
#      The command to run after linting C++ source files.
#      (i.e. post-processing or dependency analysis).
#  - depfile
#      Just forwarded to the toolchain definition.
#  - deps
#      Just forwarded to the toolchain definition.
#  - depsformat
#      Just forwarded to the toolchain definition.
#  - executable_extension
#      If this string is specified it will be used for the file extension
#      for an executable, rather than using no extension; targets will
#      still be able to override the extension using the output_extension
#      variable.
#  - loadable_module_extension
#      If this string is specified it will be used for the file extension
#      for a loadable module, rather than the shlib_extension.
#  - rebuild_define
#      The contents of this string, if specified, will be passed as a #define
#      to the toolchain. It can be used to force recompiles whenever a
#      toolchain is updated.
#  - shlib_extension
#      If this string is specified it will be used for the file extension
#      for a shared library, rather than default value specified in
#      toolchain.gni
#
template("lint_wrapper") {
  # GN's syntax can't handle more than one scope dereference at once, like
  # "invoker.toolchain_args.foo", so make a temporary to hold the toolchain
  # args so we can do "invoker_toolchain_args.foo".
  assert(defined(invoker.toolchain_args),
         "${color_error}Toolchains must specify toolchain_args")
  invoker_toolchain_args = invoker.toolchain_args
  assert(defined(invoker_toolchain_args.current_cpu),
         "${color_error}toolchain_args must specify a \"current_cpu\"${color_none}")
  assert(defined(invoker_toolchain_args.current_os),
         "${color_error}toolchain_args must specify a \"current_os\"${color_none}")
  assert(defined(invoker_toolchain_args.current_platform),
         "${color_error}toolchain_args must specify a \"current_platform\"${color_none}")
  mark_used(["invoker_toolchain_args"])

  lint_toolchain(target_name) {
    lintcc = "flint"
    lintcxx = lintcc

    if (defined(invoker.lintcc)) {
      lintcc = invoker.lintcc
    }
    if (defined(invoker.lintcxx)) {
      lintcxx = invoker.lintcxx
    }
    if (defined(invoker.lintasm)) {
      lintasm = invoker.lintasm
    }

    forward_variables_from(invoker, lint_toolchain_variables - [
      "lintasm",
      "lintcc",
      "lintcxx",
    ], [], true)
  }
}
