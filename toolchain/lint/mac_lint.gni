import("../../config/colors.gni")
import("lint_wrapper.gni")

# This template defines a lint toolchain for mac
#
# It requires the following variables specifying the executables to run:
#  - cc
#  - cxx
# and a toolchain_args scope variable with the following variables:
#  - current_cpu
#  - current_os
#  - current_platform
#
# Optional parameters that control the tools:
#
#  - extra_asmflags
#      Extra flags to be appended when assembling files.
#  - extra_asmppflags
#      Extra flags to be appended when linting assembly files. "ASMPP" stands
#      for "ASM Pre/Post-Processor" in this context, since the lint step is
#      done either pre or post compile.
#  - extra_cflags_c
#      Extra flags to be appended when compiling C files (but not C++ files).
#  - extra_cflags_cc
#      Extra flags to be appended when compiling C++ files (but not C files).
#  - extra_cflags_objc
#      Extra flags to be appended when compiling Objective C files.
#  - extra_cflags_objcc
#      Extra flags to be appended when compiling Objective C++ files.
#  - extra_cppflags
#      Extra flags to be appended when linting C/C++ and Objective C/C++ files.
#      "CPP" stands for "C Pre/Post-Processor" in this context, since the lint
#      step is done either pre or post compile.
#  - extra_cppflags_c
#      Extra flags to be appended when linting C files (but not C++ files).
#  - extra_cppflags_cc
#      Extra flags to be appended when linting C++ files (but not C files).
#  - extra_cppflags_objc
#      Extra flags to be appended when linting Object C files.
#  - extra_cppflags_objcc
#      Extra flags to be appended when linting Object C++ files.
#
#  - lintasm
#      The lint executable to run for assembly source files.
#  - lintcc
#      The lint executable to run for C source files.
#  - lintcxx
#      The lint executable to run for C++ source files.
#  - deps
#      Just forwarded to the toolchain definition.
#  - executable_extension
#      If this string is specified it will be used for the file extension
#      for an executable, rather than using no extension; targets will
#      still be able to override the extension using the output_extension
#      variable.
#  - loadable_module_extension
#      If this string is specified it will be used for the file extension
#      for a loadable module, rather than the shlib_extension.
#  - rebuild_define
#      The contents of this string, if specified, will be passed as a #define
#      to the toolchain. It can be used to force recompiles whenever a
#      toolchain is updated.
#  - shlib_extension
#      If this string is specified it will be used for the file extension
#      for a shared library, rather than default value specified in
#      toolchain_defaults.gni
#
template("mac_lint") {
  assert(defined(invoker.cc), "${color_error}gcc_lint() must specify a \"cc\" value${color_none}")
  assert(defined(invoker.cxx), "${color_error}gcc_lint() must specify a \"cxx\" value${color_none}")
  # GN's syntax can't handle more than one scope dereference at once, like
  # "invoker.toolchain_args.foo", so make a temporary to hold the toolchain
  # args so we can do "invoker_toolchain_args.foo".
  assert(defined(invoker.toolchain_args),
         "${color_error}Toolchains must specify toolchain_args")
  invoker_toolchain_args = invoker.toolchain_args
  assert(defined(invoker_toolchain_args.current_cpu),
         "${color_error}toolchain_args must specify a \"current_cpu\"${color_none}")
  assert(defined(invoker_toolchain_args.current_os),
         "${color_error}toolchain_args must specify a \"current_os\"${color_none}")
  assert(defined(invoker_toolchain_args.current_platform),
         "${color_error}toolchain_args must specify a \"current_platform\"${color_none}")
  mark_used(invoker_toolchain_args)

  cc = invoker.cc
  cxx = invoker.cxx

  lint_wrapper(target_name) {
    depfile = "{{output}}.d"
    depsformat = "gcc"

    if (defined(invoker.extra_asmflags) && invoker.extra_asmflags != "") {
      extra_asmflags = " " + invoker.extra_asmflags
    } else {
      extra_asmflags = ""
    }
    if (defined(invoker.extra_cflags) && invoker.extra_cflags != "") {
      extra_cflags = " " + invoker.extra_cflags
    } else {
      extra_cflags = ""
    }
    if (defined(invoker.extra_cflags_c) && invoker.extra_cflags_c != "") {
      extra_cflags_c = " " + invoker.extra_cflags_c
    } else {
      extra_cflags_c = ""
    }
    if (defined(invoker.extra_cflags_cc) && invoker.extra_cflags_cc != "") {
      extra_cflags_cc = " " + invoker.extra_cflags_cc
    } else {
      extra_cflags_cc = ""
    }
    if (defined(invoker.extra_cflags_objc) && invoker.extra_cflags_objc != "") {
      extra_cflags_objc = " " + invoker.extra_cflags_objc
    } else {
      extra_cflags_objc = ""
    }
    if (defined(invoker.extra_cflags_objcc) && invoker.extra_cflags_objcc != "") {
      extra_cflags_objcc = " " + invoker.extra_cflags_objcc
    } else {
      extra_cflags_objcc = ""
    }

    _common_flags = "-E -MM -MF $depfile -MT '{{output}}' {{defines}} {{include_dirs}} {{sys_include_dirs}}"
    pre_lintcc = "$cc ${_common_flags}${extra_cflags}${extra_cflags_c} {{cflags}} {{cflags_c}} {{source}}"
    pre_lintcxx = "$cxx ${_common_flags}${extra_cflags}${extra_cflags_cc} {{cflags}} {{cflags_cc}} {{source}}"
    pre_lintobjc = "$cc ${_common_flags}${extra_cflags}${extra_cflags_objc} {{cflags}} {{cflags_objc}} {{source}}"
    pre_lintobjcxx = "$cxx ${_common_flags}${extra_cflags}${extra_cflags_objcc} {{cflags}} {{cflags_objcc}} {{source}}"
    pre_lintasm = "$cc ${_common_flags}${extra_asmflags} {{asmflags}} {{source}}"

    forward_variables_from(invoker, lint_toolchain_variables - [
      "depfile",
      "depsformat",
      "pre_lintasm",
      "pre_lintcc",
      "pre_lintcxx",
      "pre_lintobjc",
      "pre_lintobjcxx",
    ], [], true)
  }
}
